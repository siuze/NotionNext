diff --git a/node_modules/react-notion-x/build/chunk-NQMZYW4I.js b/node_modules/react-notion-x/build/chunk-NQMZYW4I.js
index ffc8d13..61a9fa4 100644
--- a/node_modules/react-notion-x/build/chunk-NQMZYW4I.js
+++ b/node_modules/react-notion-x/build/chunk-NQMZYW4I.js
@@ -754,40 +754,179 @@ var SvgTypeGitHub = (props) => {
     }
   )));
 };
-var type_github_default = SvgTypeGitHub;
-
-// src/components/mention-preview-card.tsx
-import React5 from "react";
-var capitalizeFirstLetter = (str) => str.charAt(0).toUpperCase() + str.slice(1);
-var MentionPreviewCard = ({ owner, lastUpdated, externalImage, title, domain }) => {
-  return /* @__PURE__ */ React5.createElement("div", { className: "notion-external-subtitle" }, externalImage ? /* @__PURE__ */ React5.createElement("div", { className: "notion-preview-card-domain-warp" }, /* @__PURE__ */ React5.createElement("div", { className: "notion-preview-card-logo" }, externalImage), /* @__PURE__ */ React5.createElement("div", { className: "notion-preview-card-domain" }, capitalizeFirstLetter(domain.split(".")[0]))) : null, /* @__PURE__ */ React5.createElement("div", { className: "notion-preview-card-title" }, title), owner ? /* @__PURE__ */ React5.createElement("div", { className: "notion-external-subtitle-item" }, /* @__PURE__ */ React5.createElement("div", { className: "notion-external-subtitle-item-name" }, "Owner"), /* @__PURE__ */ React5.createElement("span", { className: "notion-external-subtitle-item-desc" }, owner)) : null, lastUpdated ? /* @__PURE__ */ React5.createElement("div", { className: "notion-external-subtitle-item" }, /* @__PURE__ */ React5.createElement("div", { className: "notion-external-subtitle-item-name" }, "Updated"), /* @__PURE__ */ React5.createElement("span", { className: "notion-external-subtitle-item-desc" }, lastUpdated)) : null, domain === "github.com" && /* @__PURE__ */ React5.createElement("div", { className: "notion-preview-card-github-shields" }, /* @__PURE__ */ React5.createElement(
-    "img",
+var SvgTypePROpen = (props) => {
+  return /* @__PURE__ */ React4.createElement("svg", __spreadValues({ viewBox: "0 0 16 16" }, props), /* @__PURE__ */ React4.createElement(
+    "path",
     {
-      src: `https://img.shields.io/github/stars/${owner}/${title}?logo=github`,
-      alt: ""
+      d: "M1.5 3.25a2.25 2.25 0 1 1 3 2.122v5.256a2.251 2.251 0 1 1-1.5 0V5.372A2.25 2.25 0 0 1 1.5 3.25Zm5.677-.177L9.573.677A.25.25 0 0 1 10 .854V2.5h1A2.5 2.5 0 0 1 13.5 5v5.628a2.251 2.251 0 1 1-1.5 0V5a1 1 0 0 0-1-1h-1v1.646a.25.25 0 0 1-.427.177L7.177 3.427a.25.25 0 0 1 0-.354ZM3.75 2.5a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Zm0 9.5a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Zm8.25.75a.75.75 0 1 0 1.5 0 .75.75 0 0 0-1.5 0Z",
+      fill: "#b35900"
     }
-  ), /* @__PURE__ */ React5.createElement(
-    "img",
+  ));
+};
+var SvgTypePRClose = (props) => {
+  return /* @__PURE__ */ React4.createElement("svg", __spreadValues({ viewBox: "0 0 16 16" }, props), /* @__PURE__ */ React4.createElement("g", null, /* @__PURE__ */ React4.createElement(
+    "path",
+    {
+      d: "M3.25 1A2.25 2.25 0 0 1 4 5.372v5.256a2.251 2.251 0 1 1-1.5 0V5.372A2.251 2.251 0 0 1 3.25 1Zm9.5 5.5a.75.75 0 0 1 .75.75v3.378a2.251 2.251 0 1 1-1.5 0V7.25a.75.75 0 0 1 .75-.75Zm-2.03-5.273a.75.75 0 0 1 1.06 0l.97.97.97-.97a.748.748 0 0 1 1.265.332.75.75 0 0 1-.205.729l-.97.97.97.97a.751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018l-.97-.97-.97.97a.749.749 0 0 1-1.275-.326.749.749 0 0 1 .215-.734l.97-.97-.97-.97a.75.75 0 0 1 0-1.06ZM2.5 3.25a.75.75 0 1 0 1.5 0 .75.75 0 0 0-1.5 0ZM3.25 12a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Zm9.5 0a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Z",
+      fill: "#6e7781"
+    }
+  )));
+};
+var SvgTypePRMerge = (props) => {
+  return /* @__PURE__ */ React4.createElement("svg", __spreadValues({ viewBox: "0 0 16 16" }, props), /* @__PURE__ */ React4.createElement("g", null, /* @__PURE__ */ React4.createElement(
+    "path",
+    {
+      d: "M5.45 5.154A4.25 4.25 0 0 0 9.25 7.5h1.378a2.251 2.251 0 1 1 0 1.5H9.25A5.734 5.734 0 0 1 5 7.123v3.505a2.25 2.25 0 1 1-1.5 0V5.372a2.25 2.25 0 1 1 1.95-.218ZM4.25 13.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Zm8.5-4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5ZM5 3.25a.75.75 0 1 0 0 .005V3.25Z",
+      fill: "#8250df"
+    }
+  )));
+};
+var SvgTypeIssueOpen = (props) => {
+	return /* @__PURE__ */ React4.createElement("svg", __spreadValues({ viewBox: "0 0 16 16" }, props), /* @__PURE__ */ React4.createElement("g", null, /* @__PURE__ */ React4.createElement(
+	  "path",
+	  {
+		d: "M8 9.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z",
+		fill: "#b35900"
+	  }
+	),
+	React4.createElement(
+	  "path",
+	  {
+		d: "M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Z",
+		fill: "#b35900"
+	  }
+	)));
+  };
+var SvgTypeIssueClose = (props) => {
+  return /* @__PURE__ */ React4.createElement("svg", __spreadValues({ viewBox: "0 0 16 16" }, props), /* @__PURE__ */ React4.createElement("g", null, /* @__PURE__ */ React4.createElement(
+    "path",
+    {
+      d: "M11.28 6.78a.75.75 0 0 0-1.06-1.06L7.25 8.69 5.78 7.22a.75.75 0 0 0-1.06 1.06l2 2a.75.75 0 0 0 1.06 0l3.5-3.5Z",
+      fill: "#8250df"
+    }
+  ),
+  React4.createElement(
+    "path",
     {
-      src: `https://img.shields.io/github/last-commit/${owner}/${title}`,
-      alt: ""
+      d: "M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0Zm-1.5 0a6.5 6.5 0 1 0-13 0 6.5 6.5 0 0 0 13 0Z",
+      fill: "#8250df"
     }
   )));
 };
+var SvgTypeIssueSkip = (props) => {
+  return /* @__PURE__ */ React4.createElement("svg", __spreadValues({ viewBox: "0 0 16 16" }, props), /* @__PURE__ */ React4.createElement("g", null, /* @__PURE__ */ React4.createElement(
+    "path",
+    {
+      d: "M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Zm9.78-2.22-5.5 5.5a.749.749 0 0 1-1.275-.326.749.749 0 0 1 .215-.734l5.5-5.5a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042Z",
+      fill: "#57606a"
+    }
+  )));
+};
+var type_github_default = SvgTypeGitHub;
+
+// src/components/mention-preview-card.tsx
+import React5 from "react";
+var capitalizeFirstLetter = (str) => str.charAt(0).toUpperCase() + str.slice(1);
+var MentionPreviewCard = ({ owner, lastUpdated, externalImage, title, domain, author, created, repo, commitHash, stateDesc, stateAtDesc, prIssueImage, inline, number }) => {
+  return /* @__PURE__ */ React5.createElement("div", { className: (inline?'':'notion-external-subtitle-card ')+"notion-external-subtitle" }, 
+    (externalImage && inline) ? /* @__PURE__ */ React5.createElement("div", { className: "notion-preview-card-domain-warp" }, 
+        /* @__PURE__ */ React5.createElement("div", { className: "notion-preview-card-logo" }, externalImage), 
+        /* @__PURE__ */ React5.createElement("div", { className: "notion-preview-card-domain" }, 
+        capitalizeFirstLetter(domain.split(".")[0]))) : null, 
+    /* @__PURE__ */ React5.createElement("div", { className: "notion-preview-card-title" }, title), 
+    commitHash ? /* @__PURE__ */ React5.createElement("div", { className: "notion-external-subtitle-item" }, 
+        /* @__PURE__ */ React5.createElement("div", { className: (inline?'':'notion-external-subtitle-item-name-card ')+"notion-external-subtitle-item-name", style:{width: "max-content"} }, (inline?repo:author) + ' · ' + commitHash + (inline ? '' : ' Committed ') + (inline?'':created)), 
+        ) : null, 
+    stateDesc ? /* @__PURE__ */ React5.createElement("div", { className: "notion-external-subtitle-item" }, 
+    (externalImage && !inline) ? React5.createElement("div", { className: "notion-external-subtitle-item-desc-svg-card notion-external-subtitle-item-desc-svg notion-external-image"}, externalImage) : null,
+    (prIssueImage && !inline) ? /* @__PURE__ */ React5.createElement("div", { className: "notion-external-subtitle-item-desc-svg" }, prIssueImage):null,
+    /* @__PURE__ */ React5.createElement("div", { className: (inline?'':'notion-external-subtitle-item-name-card ')+"notion-external-subtitle-item-name", style:{width: "max-content"} }, (inline?repo:(number + ' · '+author)) + ' · ' + stateDesc + ' ' + stateAtDesc ), 
+    ) : null, 
+    (stateDesc && inline) ? /* @__PURE__ */ React5.createElement("div", { className: "notion-external-subtitle-item" }, 
+        /* @__PURE__ */ React5.createElement("div", { className: "notion-external-subtitle-item-name" }, "State"), 
+        /* @__PURE__ */ React5.createElement("span", { className: "notion-external-subtitle-item-desc" }, 
+        /* @__PURE__ */ React5.createElement("div", { className: "notion-external-image" }, prIssueImage),
+        stateDesc)) : null, 
+    (owner && inline) ? /* @__PURE__ */ React5.createElement("div", { className: "notion-external-subtitle-item" }, 
+        /* @__PURE__ */ React5.createElement("div", { className: "notion-external-subtitle-item-name" }, "Owner"), 
+        /* @__PURE__ */ React5.createElement("span", { className: "notion-external-subtitle-item-desc" }, 
+        React5.createElement("img",{className: "notion-external-image", src: `https://avatars.githubusercontent.com/${owner}`,alt: ""}),
+        owner)) : null, 
+    (author && inline) ? /* @__PURE__ */ React5.createElement("div", { className: "notion-external-subtitle-item" }, 
+        /* @__PURE__ */ React5.createElement("div", { className: "notion-external-subtitle-item-name" }, "Author"), 
+        /* @__PURE__ */ React5.createElement("span", { className: "notion-external-subtitle-item-desc" }, 
+        React5.createElement("img",{className: "notion-external-image", src: `https://avatars.githubusercontent.com/${author}`,alt: ""}),
+        author)) : null, 
+    (lastUpdated && inline) ? /* @__PURE__ */ React5.createElement("div", { className: "notion-external-subtitle-item" }, 
+        /* @__PURE__ */ React5.createElement("div", { className: "notion-external-subtitle-item-name" }, "Updated"), 
+        /* @__PURE__ */ React5.createElement("span", { className: "notion-external-subtitle-item-desc" }, lastUpdated)) : null, 
+    (created && inline) ? /* @__PURE__ */ React5.createElement("div", { className: "notion-external-subtitle-item" }, 
+        /* @__PURE__ */ React5.createElement("div", { className: "notion-external-subtitle-item-name" }, "Created"), 
+        /* @__PURE__ */ React5.createElement("span", { className: "notion-external-subtitle-item-desc" }, created)) : null, 
+    domain === "github.com" && /* @__PURE__ */ React5.createElement("div", { className: "notion-preview-card-github-shields" }, 
+));
+};
 
 // src/components/eoi.tsx
 var EOI = ({ block, inline, className }) => {
+  // console.log('EOI')
+  // console.log(block)
+  // console.log(inline)
+  // console.log(className)
   var _a, _b, _c;
   const { components } = useNotionContext();
   const { original_url, attributes, domain } = (block == null ? void 0 : block.format) || {};
   if (!original_url || !attributes) {
     return null;
   }
+  const commitHashIndex = original_url? original_url.indexOf('/commit/'): null;
+  const pullIndex = original_url? original_url.indexOf('/pull/'): null;
+  const issueIndex = original_url? original_url.indexOf('/issues/'): null;
+  const commitHash = (commitHashIndex && commitHashIndex > -1) ? original_url.slice(commitHashIndex+8,commitHashIndex+15) : null;
+  const repo = (commitHashIndex && commitHashIndex > -1) ? original_url.slice(original_url.indexOf('github.com/')+11,commitHashIndex) : 
+               (pullIndex && pullIndex > -1) ? original_url.slice(original_url.indexOf('github.com/')+11,pullIndex) : 
+               (issueIndex && issueIndex > -1) ? original_url.slice(original_url.indexOf('github.com/')+11,issueIndex) : null;
   const title = (_a = attributes.find((attr) => attr.id === "title")) == null ? void 0 : _a.values[0];
+  const state = (_a = attributes.find((attr) => attr.id === "state")) == null ? void 0 : _a.values[0];
+  const number = (_a = attributes.find((attr) => attr.id === "number")) == null ? void 0 : _a.values[0];
   let owner = (_b = attributes.find((attr) => attr.id === "owner")) == null ? void 0 : _b.values[0];
+  let author = (_b = attributes.find((attr) => attr.id === "author")) == null ? (_b = attributes.find((attr) => attr.id === "user")) == null ? void 0 : _b.values[0].split("/").at(-1) : _b.values[0].split("/").at(-1);
   const lastUpdatedAt = (_c = attributes.find((attr) => attr.id === "updated_at")) == null ? void 0 : _c.values[0];
-  const lastUpdated = lastUpdatedAt ? formatNotionDateTime(lastUpdatedAt) : null;
+  const createdAt = (_c = attributes.find((attr) => attr.id === "created_at")) == null ? void 0 : _c.values[0];
+  const stateAt = (_c = attributes.find((attr) => (attr.id === "open_at" || attr.id === "closed_at" || attr.id === "merged_at"))) == null ? void 0 : _c.values[0];
+  let stateDesc = null
+  function timeDifference(current, previous) {
+    const msPerMinute = 60 * 1000;
+    const msPerHour = msPerMinute * 60;
+    const msPerDay = msPerHour * 24;
+    const msPerMonth = msPerDay * 30;
+    const msPerYear = msPerDay * 365;
+    const elapsed = current - previous;
+    if (elapsed < msPerMinute) {
+        const nums = Math.round(elapsed/1000);
+         return nums + ` second${nums>1?'s':''} ago`;   
+    } else if (elapsed < msPerHour) {
+        const nums = Math.round(elapsed/msPerMinute);
+        return nums + ` minute${nums>1?'s':''} ago`;   
+    } else if (elapsed < msPerDay ) {
+        const nums = Math.round(elapsed/msPerHour);
+        return nums + ` hour${nums>1?'s':''} ago`;   
+    } else if (elapsed < msPerMonth) {
+        const nums = Math.round(elapsed/msPerDay);
+        return nums + ` day${nums>1?'s':''} ago`;   
+    } else if (elapsed < msPerYear) {
+        const nums = Math.round(elapsed/msPerMonth);
+        return nums + ` month${nums>1?'s':''} ago`;   
+    } else {
+        const nums = Math.round(elapsed/msPerYear);
+        return nums + ` year${nums>1?'s':''} ago`;   
+    }
+  }
+  const lastUpdated = lastUpdatedAt ? (timeDifference(new Date().getTime(), new Date(`${lastUpdatedAt.start_time || ""} ${lastUpdatedAt.start_date} ${lastUpdatedAt.time_zone || ""}`).getTime())) : null;
+  const created = createdAt ? (timeDifference(new Date().getTime(), new Date(`${createdAt.start_time || ""} ${createdAt.start_date} ${createdAt.time_zone || ""}`).getTime())) : null;
+  let stateAtDesc = stateAt ? (timeDifference(new Date().getTime(), new Date(`${stateAt.start_time || ""} ${stateAt.start_date} ${stateAt.time_zone || ""}`).getTime())) : null;
   let externalImage;
+  let prIssueImage = null;
   switch (domain) {
     case "github.com": {
       externalImage = /* @__PURE__ */ React6.createElement(type_github_default, null);
@@ -807,6 +946,36 @@ var EOI = ({ block, inline, className }) => {
       return null;
     }
   }
+  switch (state) {
+    case "github:pull_state/open": {
+      prIssueImage = /* @__PURE__ */ React6.createElement(SvgTypePROpen, null);
+      stateAtDesc = created
+      stateDesc = 'Opened'
+      break;
+    }
+    case "github:pull_state/closed": {
+      prIssueImage = /* @__PURE__ */ React6.createElement(SvgTypePRClose, null);
+      stateDesc = 'Closed'
+      break;
+    }
+    case "github:pull_state/merged": {
+      prIssueImage = /* @__PURE__ */ React6.createElement(SvgTypePRMerge, null);
+      stateDesc = 'Merged'
+      break;
+    }
+    case "github:issue_state/open": {
+      prIssueImage = /* @__PURE__ */ React6.createElement(SvgTypeIssueOpen, null);
+      stateAtDesc = created
+      stateDesc = 'Opened'
+      break;
+    }
+    case "github:issue_state/closed": {
+      prIssueImage = /* @__PURE__ */ React6.createElement(SvgTypeIssueClose, null);
+      stateDesc = 'Closed'
+      break;
+    }
+    default: {}
+  }
   return /* @__PURE__ */ React6.createElement(
     components.Link,
     {
@@ -819,17 +988,18 @@ var EOI = ({ block, inline, className }) => {
         className
       )
     },
-    externalImage ? /* @__PURE__ */ React6.createElement("div", { className: "notion-external-image" }, externalImage) : null,
-    /* @__PURE__ */ React6.createElement("div", { className: "notion-external-description" }, /* @__PURE__ */ React6.createElement("div", { className: "notion-external-title" }, title), owner || lastUpdated ? /* @__PURE__ */ React6.createElement(
-      MentionPreviewCard,
-      {
-        title,
-        owner,
-        lastUpdated,
-        domain,
-        externalImage
-      }
-    ) : null)
+    externalImage ? /* @__PURE__ */ React6.createElement("div", { className: (inline?'':'notion-external-image-card ')+"notion-external-image" }, 
+      inline?(prIssueImage??externalImage):
+              (owner? React5.createElement("img",{className: "notion-external-image-icon notion-external-image", style:{marginLeft:'4px'}, src: `https://avatars.githubusercontent.com/${owner}`,alt: ""}): 
+                      React5.createElement("img",{className: "notion-external-image-icon notion-external-image", style:{marginLeft:'4px'}, src: `https://avatars.githubusercontent.com/${author}`,alt: ""}))) : null,
+    /* @__PURE__ */ React6.createElement("div", { className: "notion-external-description" }, 
+        (number && inline) ? React6.createElement("span", { style:{marginRight:'4px',color:'#37352fa6'} }, number) : null,
+        inline ? /* @__PURE__ */ React6.createElement("div", { className: "notion-external-title" }, title) : null, 
+        owner || lastUpdated || author || created ? /* @__PURE__ */ React6.createElement(MentionPreviewCard,{title, owner, lastUpdated, domain, externalImage, author, created, repo, commitHash, stateDesc, stateAtDesc, prIssueImage, inline, number}) : null,
+        (commitHash && inline) ? React6.createElement("span", { style:{marginLeft:'4px',color:'#37352fa6'} }, commitHash) : null,
+        (owner && inline) ? React5.createElement("img",{className: "notion-external-image", style:{marginLeft:'4px'}, src: `https://avatars.githubusercontent.com/${owner}`,alt: ""}) : null
+        ),
+
   );
 };
 
@@ -870,14 +1040,22 @@ var PageTitleImpl = (_a) => {
   if (!((_a2 = block.properties) == null ? void 0 : _a2.title)) {
     return null;
   }
-  return /* @__PURE__ */ React8.createElement("span", __spreadValues({ className: cs("notion-page-title", className) }, rest), /* @__PURE__ */ React8.createElement(
+//   console.log('PageTitleImpl');
+//   console.log(block);
+  if (block.icon_undefined && block.collection_title_only){
+    return /* @__PURE__ */ React8.createElement("span", __spreadValues({ className: cs("notion-page-title", className) }, rest), /* @__PURE__ */ 
+     /* @__PURE__ */ React8.createElement("span", { className: `no-border-bottom notion-page-title-text`, }, /* @__PURE__ */ React8.createElement(Text, { value: (_b2 = block.properties) == null ? void 0 : _b2.title, block })));
+  };
+  return /* @__PURE__ */ React8.createElement("span", __spreadValues({ className: cs("notion-page-title", className) }, rest), /* @__PURE__ */ 
+  React8.createElement(
     PageIcon,
     {
       block,
       defaultIcon,
       className: "notion-page-title-icon"
     }
-  ), /* @__PURE__ */ React8.createElement("span", { className: "notion-page-title-text" }, /* @__PURE__ */ React8.createElement(Text, { value: (_b2 = block.properties) == null ? void 0 : _b2.title, block })));
+  ),
+   /* @__PURE__ */ React8.createElement("span", { className: `${block.collection_title_only?'no-border-bottom ':''}notion-page-title-text` }, /* @__PURE__ */ React8.createElement(Text, { value: (_b2 = block.properties) == null ? void 0 : _b2.title, block })));
 };
 var PageTitle = memo(PageTitleImpl);
 
diff --git a/node_modules/react-notion-x/build/third-party/collection.js b/node_modules/react-notion-x/build/third-party/collection.js
index 4bb7bb1..f1f1ba3 100644
--- a/node_modules/react-notion-x/build/third-party/collection.js
+++ b/node_modules/react-notion-x/build/third-party/collection.js
@@ -3742,11 +3742,20 @@ var PropertyImpl = (props) => {
   const renderTitleValue = React24.useMemo(
     () => function FormulaTitle() {
       if (block && linkToTitlePage) {
+        // console.log("renderTitleValue")
+        // console.log(block)
+        if(!block.content){
+            block.collection_title_only = true
+        }
+        if (!(block.format?.page_icon)){
+            block.icon_undefined = true
+        }
         return /* @__PURE__ */ React24.createElement(
           components.PageLink,
           {
             className: cs("notion-page-link"),
-            href: mapPageUrl(block.id)
+            href: (block.content)?mapPageUrl(block.id):undefined,
+            title: (block.properties?.title)?(block.properties.title[0][0]):undefined
           },
           /* @__PURE__ */ React24.createElement(PageTitle, { block })
         );
@@ -3971,8 +3980,9 @@ var PropertyImpl = (props) => {
                 className: cs(
                   `notion-property-${schema.type}-item`,
                   color && `notion-item-${color}`
-                )
-              },
+                ),
+                title: value
+            },
               value
             )
           );
